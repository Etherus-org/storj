// Copyright (C) 2019 Storj Labs, Inc.
// See LICENSE for copying information.

syntax = "proto3";
option go_package = "pb";

package nodemgmt;

import "gogo.proto";
import "google/protobuf/timestamp.proto";

service NodeMgmt {
    rpc GetMgmtStats(GetMgmtStatsRequest) returns (GetMgmtStatsResponse);
    rpc GetMgmtStorageUsage(GetMgmtStorageUsageRequest) returns (GetMgmtStorageUsageResponse);
}

message Pagination {
    uint32 limit = 1;
    uint64 offset = 2;
}

message GetMgmtStatsRequest {
    Pagination page = 1;
}

message GetMgmtStatsResponse {
    message Reputation {
        int64 total_count = 1;
        int64 success_count = 2;
        double reputation_alpha = 3;
        double reputation_beta = 4;
        double reputation_score = 5;
    }
    message Stats {
        Reputation uptime_check = 1;
        Reputation audit_check = 2;
        google.protobuf.Timestamp disqualified = 3 [(gogoproto.stdtime) = true, (gogoproto.nullable) = true];
    }
    message NodeStats {
        bytes node_id = 1 [(gogoproto.customtype) = "NodeID", (gogoproto.nullable) = false];
        Stats stats = 2;
    }

    Pagination next_page = 1;
    repeated NodeStats node_stats = 2;
}

message GetMgmtStorageUsageRequest {
    Pagination page = 1;
    google.protobuf.Timestamp from = 2 [(gogoproto.stdtime) = true, (gogoproto.nullable) = false];
    google.protobuf.Timestamp to = 3 [(gogoproto.stdtime) = true, (gogoproto.nullable) = false];
}

message GetMgmtStorageUsageResponse {
    message StorageUsage {
        double at_rest_total = 1;
        google.protobuf.Timestamp timestamp = 2 [(gogoproto.stdtime) = true, (gogoproto.nullable) = false];
    }
    message NodeStorageUsage {

        bytes node_id = 1 [(gogoproto.customtype) = "NodeID", (gogoproto.nullable) = false];
        repeated StorageUsage storage_usage = 2;
    }

    Pagination next_page = 1;
    repeated NodeStorageUsage node_storage_usage = 2;
}

